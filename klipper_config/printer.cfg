
# This file contains pin mappings for the Creality "v4.2.7" board. To
# use this config, during "make menuconfig" select the STM32F103 with
# a "28KiB bootloader" and serial (on USART1 PA10/PA9) communication.

# If you prefer a direct serial connection, in "make menuconfig"
# select "Enable extra low-level configuration options" and select
# serial (on USART3 PB11/PB10), which is broken out on the 10 pin IDC
# cable used for the LCD module as follows:
# 3: Tx, 4: Rx, 9: GND, 10: VCC

# Flash this firmware by copying "out/klipper.bin" to a SD card and
# turning on the printer with the card inserted. The firmware
# filename must end in ".bin" and must not match the last filename
# that was flashed.

# See docs/Config_Reference.md for a description of parameters.
#[include adxl.cfg]
[include timelapse.cfg]

[exclude_object]

#[include adxl.cfg]
[include Adaptive_Mesh.cfg] 
[gcode_arcs]

[bltouch]
sensor_pin: ^gpio22
control_pin: gpio29
x_offset: -38
y_offset: -5
stow_on_each_sample: False
probe_with_touch_mode: True
pin_move_time: 0.5
pin_up_touch_mode_reports_triggered: False
z_offset: 1.490
speed: 10
lift_speed: 20
samples: 2
sample_retract_dist: 5
samples_tolerance_retries: 3

[stepper_x]
step_pin: gpio11
dir_pin: !gpio10
enable_pin: !gpio12
microsteps: 16
full_steps_per_rotation: 200
rotation_distance: 40
endstop_pin: ^gpio4
# endstop_pin: tmc2209_stepper_x:virtual_endstop
# homing_retract_dist: 0
position_endstop: 0
position_max: 235
homing_speed: 150

[tmc2209 stepper_x]
uart_pin: gpio9
tx_pin: gpio8
uart_address: 0
run_current: 0.8
hold_current: 0.6
stealthchop_threshold: 99999999
# diag_pin: ^gpio4
# driver_SGTHRS: 100

[stepper_y]
step_pin: gpio6
dir_pin: !gpio5
enable_pin: !gpio7
microsteps: 16
full_steps_per_rotation: 200
rotation_distance: 40
endstop_pin: ^gpio3
# endstop_pin: tmc2209_stepper_y:virtual_endstop
# homing_retract_dist: 0
position_endstop: 0
position_max: 235
homing_speed: 150

[tmc2209 stepper_y]
uart_pin: gpio9
tx_pin: gpio8
uart_address: 2
run_current: 0.8
hold_current: 0.6
stealthchop_threshold: 99999999
diag_pin: ^gpio3
driver_SGTHRS: 100

[stepper_z]
step_pin: gpio19
dir_pin: gpio28
enable_pin: !gpio2
microsteps: 16
full_steps_per_rotation: 200
rotation_distance: 8
# endstop_pin: ^gpio25
endstop_pin:probe: z_virtual_endstop
position_min: -5
position_max: 250
homing_speed: 100

[tmc2209 stepper_z]
uart_pin: gpio9
tx_pin: gpio8
uart_address: 1
run_current: 0.7
hold_current: 0.5
stealthchop_threshold: 9999999

[extruder]
step_pin: gpio14
dir_pin: gpio13
enable_pin: !gpio15
microsteps: 16
rotation_distance: 7.36
sensor_type:  Generic 3950  #ATC Semitec 104GT-2 
max_extrude_only_distance: 200
nozzle_diameter: 0.4
filament_diameter: 1.75
heater_pin: gpio23
#sensor_type: Generic 3950
sensor_pin: gpio27
#control = pid
#pid_kp=32.114
#pid_ki=3.756
#pid_kd=68.643
#pid_kp = 45.097
#pid_ki = 3.537
#pid_kd = 143.747
min_temp: 0
max_temp: 275
min_extrude_temp: 170
pressure_advance = 0
pressure_advance_smooth_time: 0.029

[tmc2209 extruder]
uart_pin: gpio9
tx_pin: gpio8
uart_address: 3
run_current: 0.7
hold_current: 0.5
#stealthchop_threshold: 0

[firmware_retraction]
retract_length: 1
#   The length of filament (in mm) to retract when G10 is activated,
#   and to unretract when G11 is activated (but see
#   unretract_extra_length below). The default is 0 mm.
retract_speed: 30
#   The speed of retraction, in mm/s. The default is 20 mm/s.
unretract_extra_length: 0
#   The length (in mm) of *additional* filament to add when
#   unretracting.
unretract_speed: 30
#   The speed of unretraction, in mm/s. The default is 10 mm/s.

[heater_bed]
heater_pin: gpio21
sensor_type: EPCOS 100K B57560G104F
sensor_pin: gpio26
#control: pid
#pid_Kp=71.830 
#pid_Ki=1.800 
#pid_Kd=716.505
min_temp: 0
max_temp: 110

[fan]
pin: gpio18

[heater_fan controller_fan]
pin: gpio20

[heater_fan hotend_fan]
pin: gpio17
heater: extruder
heater_temp: 50.0


[mcu]
serial: /dev/serial/by-id/usb-Klipper_rp2040_4550357129141DE8-if00
restart_method: command

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 5000
max_z_velocity: 10
max_z_accel: 100

[input_shaper]
shaper_freq_x: 53.6   # frequency for the X mark of the test model
shaper_type_x: ei
shaper_freq_y: 44.8 # frequency for the Y mark of the test model
shaper_type_y: mzv


[safe_z_home]
home_xy_position: 156,115 # Change coordinates to the center of your print bed
z_hop: 3 # Move up 10mm
z_hop_speed: 200

[bed_mesh]
speed: 200
horizontal_move_z: 10
mesh_min: 15, 15
mesh_max: 190, 190
probe_count: 4,4
algorithm: bicubic
fade_start: 1
fade_end: 10
fade_target: 0
mesh_pps: 2,2  # Default 2,2

[temperature_sensor Board_MCU]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

[temperature_sensor Raspberry_Pi]
sensor_type: temperature_host
min_temp: 0
max_temp: 100


[screws_tilt_adjust]
screw1: 67,40
screw1_name: front left screw
screw2: 235,40
screw2_name: front right screw
screw3: 235,200
screw3_name: rear right screw
screw4: 67,200
screw4_name: rear left screw
horizontal_move_z: 10
speed: 100
screw_thread: CW-M4

[bed_screws]
speed: 150
screw1: 30,30
screw2: 190,30
screw3: 190,190
screw4: 30,190

#[filament_switch_sensor RunoutSensor]
#pause_on_runout: True
#runout_gcode: PAUSE
#insert_gcode: RESUME
#switch_pin: ^gpio16


[virtual_sdcard]
path: ~/gcode_files

[display_status]

[respond]
default_type: command
[pause_resume] recover_velocity: 50

[pause_resume]

[gcode_macro _CURA_SET_PRINT_STATS_INFO]
gcode:
  {% if params.LAYER_COUNT is defined %}
    SET_PRINT_STATS_INFO TOTAL_LAYER={params.LAYER_COUNT}
  {% endif %}
  {% if params.LAYER is defined %}
    SET_PRINT_STATS_INFO CURRENT_LAYER={(params.LAYER | int) + 1}
  {% endif %}
  
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro M0]
gcode:
      PAUSE

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print and raise the print head by 5cm
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  G91 ; Set relative positioning mode
  G1 Z50 F300 ; Move the Z-axis upwards by 5cm at a speed of 300mm/min
  G90 ; Restore absolute positioning mode
  BASE_CANCEL_PRINT

[gcode_macro CHANGE_FILAMENT]
description: Starts process of Filament Change
gcode:
  {% if printer.extruder.temperature < 180 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    PAUSE_MACRO
    _DISABLE_FS
    UNLOAD_FILAMENT
  {% endif %}
  
[gcode_macro M600]
gcode:
 CHANGE_FILAMENT  

[gcode_macro M601]
gcode:
    CHANGE_FILAMENT

 
[gcode_macro PAUSE_MACRO]
description: Pauses Print
gcode:
    PAUSE
    SET_IDLE_TIMEOUT TIMEOUT={ 30 * 60 }

[gcode_macro FC_RESUME]
description: Resume print after Filament Change
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    SET_IDLE_TIMEOUT TIMEOUT={ 10 * 60 }
    G1 E-{ E }
    # Reset extruder position
    G92 E0
    RESUME
 
[gcode_macro UNLOAD_FILAMENT]
description: Unloads Filament from extruder
gcode:
  {% if printer.extruder.temperature < 180 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=UNLOAD_state
    {% set Z = params.Z|default(50)|int %}
    {% set axis_max = printer.toolhead.axis_maximum %}
    {% set pos = printer.toolhead.position %}
 
    {% set z_diff = axis_max.z - pos.z %}
    {% set z_safe_lift = [ Z, z_diff ] | min%}
 
    G91                   # relative positioning
    G0 Z{ z_safe_lift }
    # Reset extruder position
    G92 E0
    G1 E5.0 F300        # extrude a little
    G1 E-50 F{ 10 * 60 } # perform the unload
    G1 E-50 F{ 5 * 60 }   # finish the unload
    RESTORE_GCODE_STATE NAME=UNLOAD_state
  {% endif %}
 
[gcode_macro PURGE]
description: Extrudes filament, used to clean out previous filament
gcode:
  {% if printer.extruder.temperature < 180 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
  {% set PURGE_AMOUNT = params.PURGE_AMOUNT|default(40)|float %}
    SAVE_GCODE_STATE NAME=PURGE_state
    G91                   # relative coords
    G1 E{PURGE_AMOUNT} F{ 5 * 60 }  # purge
    RESTORE_GCODE_STATE NAME=PURGE_state
  {% endif %}
 
[gcode_macro LOAD_FILAMENT]
description: Loads filament into the extruder
gcode:
  {% if printer.extruder.temperature < 180 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=LOAD_state
    G91                   # Relative coords
    G1 E50 F{ 5 * 60 }  # extrude
    G4 P{ 0.9 * 1000 }    # dwell (ms)
    G1 E25.0 F{ 5 * 60 }  # extrude a little more
    _ENABLE_FS
    RESTORE_GCODE_STATE NAME=LOAD_state
  {% endif %}
 
[gcode_macro _DISABLE_FS]
description: placeholder, disables filament sensor that might trigger an M600 in the middle of a load/unload/M600...
gcode:
    SET_FILAMENT_SENSOR SENSOR=RunoutSensor ENABLE=0
 
[gcode_macro _ENABLE_FS]
description: placeholder, enables filament sensor
gcode:
    SET_FILAMENT_SENSOR SENSOR=RunoutSensor ENABLE=1
[save_variables]
filename: ~/savedVariables.cfg

[gcode_macro SET_GCODE_OFFSET]
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}
    {% else %} 
        {% set offsets = {'x': None,'y': None,'z': None} %}
    {% endif %}

    {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}

    _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}

    {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
    {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
    {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
    {%if 'Z_ADJUST' in params %}
        {%if ns.offsets.z == None %}{% set null = ns.offsets.update({'z': 0}) %}{% endif %}
        {% set null = ns.offsets.update({'z': ns.offsets.z + (params.Z_ADJUST | float)}) %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"

[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:  
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}

        _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}

        { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
    {% endif %}|

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bltouch]
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.038750, -0.103750, -0.037500, -0.063750
#*# 	  -0.102500, -0.026250, 0.030000, 0.030000
#*# 	  -0.092500, -0.037500, -0.027500, -0.020000
#*# 	  -0.112500, -0.040000, -0.055000, -0.133750
#*# tension = 0.2
#*# min_x = 15.0
#*# algo = lagrange
#*# y_count = 4
#*# mesh_y_pps = 2
#*# min_y = 15.0
#*# x_count = 4
#*# max_y = 189.99
#*# mesh_x_pps = 2
#*# max_x = 189.99
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 31.210
#*# pid_ki = 3.201
#*# pid_kd = 76.074
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 74.753
#*# pid_ki = 1.613
#*# pid_kd = 866.203
